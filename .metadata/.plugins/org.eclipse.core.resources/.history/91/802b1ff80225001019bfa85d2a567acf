/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "stdint.h"
#include "mpu6050.h"
#include "lqr.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define 	EXP_FILTER_ALPHA   	32
#define 	MAX_16_BIT_VALUE   	65535
#define 	Z_AXIS_SETPOINT    	32768
#define    	PROPORTIONAL_GAIN   2


#define FILTER_GYRO_ONLY

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

MPU6050_Data sensorData;
MPU6050_Data filteredSensorData;

// Motor actuator values; 100% duty cycle = zero speed, 0% duty cycle = highest speed
// Motor 1, Direction A and B;
uint16_t   M1_A = 0;
uint16_t   M1_B = 0;

// Motor 1, Direction A and B
uint16_t   M2_A = 0;
uint16_t   M2_B = 0;



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ExponentialFilter(MPU6050_Data *sensorValue)
{
	uint32_t temp;
	/* Exponential filter formula for 16-bit unsigned intergers:
	 *   output = ( ( alpha*pre_output ) + ( (65535-alpha)*input) ) )/ 65535;
	 * where alpha = smoothing factor, close to 65535 = strong smoothing, but slow
	 * response, and close to 0 = weak smoothing, but fast response.
	 */

#ifndef FILTER_GYRO_ONLY
	// Accelration_X
	temp = (uint32_t) EXP_FILTER_ALPHA * filteredSensorData.Accel_X+(uint32_t)(MAX_16_BIT_VALUE-EXP_FILTER_ALPHA*sensorValue->Accel_X);
    filteredSensorData.Accel_X = temp / MAX_16_BIT_VALUE;

	// Accelration_Y
	temp = (uint32_t) EXP_FILTER_ALPHA * filteredSensorData.Accel_Y+(uint32_t)(MAX_16_BIT_VALUE-EXP_FILTER_ALPHA*sensorValue->Accel_Y);
    filteredSensorData.Accel_Y = temp / MAX_16_BIT_VALUE;

	// Accelration_Z
	temp = (uint32_t) EXP_FILTER_ALPHA * filteredSensorData.Accel_Z+(uint32_t)(MAX_16_BIT_VALUE-EXP_FILTER_ALPHA*sensorValue->Accel_Z);
    filteredSensorData.Accel_Z = temp / MAX_16_BIT_VALUE;
#else

    filteredSensorData.Accel_X =  sensorValue->Accel_X;

    filteredSensorData.Accel_Y =  sensorValue->Accel_Y;

    filteredSensorData.Accel_Z =  sensorValue->Accel_Z;

#endif
	// Gyro_X
	temp = (uint32_t) EXP_FILTER_ALPHA * filteredSensorData.Gyro_X+(uint32_t)(MAX_16_BIT_VALUE-EXP_FILTER_ALPHA*sensorValue->Gyro_X);
    filteredSensorData.Gyro_X = temp / MAX_16_BIT_VALUE;

	// Gyro_Y
	temp = (uint32_t) EXP_FILTER_ALPHA * filteredSensorData.Gyro_Y+(uint32_t)(MAX_16_BIT_VALUE-EXP_FILTER_ALPHA*sensorValue->Gyro_Y);
    filteredSensorData.Gyro_Y = temp / MAX_16_BIT_VALUE;

	// Gyro_Z
	temp = (uint32_t) EXP_FILTER_ALPHA * filteredSensorData.Gyro_Z+(uint32_t)(MAX_16_BIT_VALUE-EXP_FILTER_ALPHA*sensorValue->Gyro_Z);
    filteredSensorData.Gyro_Z = temp / MAX_16_BIT_VALUE;
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  // Initialize MPU-6050 IMU chip
  MPU6050_Init();

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char       printString[256] = {0};
	  int32_t    errorValue = 0;         // use integer value instead of unsigned, since the error value can be positive or negative.

	  uint16_t   actuation = 0;
	  uint16_t   direction = 0;

	  // Step 1: Read inputs from the sensor (gyroscope only), and print the values on UART_2
	  MPU6050_Read_All(&sensorData);         // Read data
	  ExponentialFilter(&sensorData);        // Filter data

	  // formulate the string with three gyroscope axis, and print it.
	  sprintf(printString, "X: 0x%04x, Y: 0x%04x, Z: 0x%04x\r\n", sensorData.Gyro_X, sensorData.Gyro_Y, sensorData.Gyro_Z);
      HAL_UART_Transmit(&huart2, (uint8_t*)printString, strlen(printString), HAL_MAX_DELAY);

      // Step 2: Calculate error from the set point (middle of Z-axis, since the pendulum robot moves and tries to
      //         balance on Z-axis (perpendicular to the MPU-6050 PCB plane). For now, keep both motors at the same
      //         speed/ direction.

      // === P CONTROL BLOCK ===
      errorValue = Z_AXIS_SETPOINT - filteredSensorData.Gyro_Z;

	  actuation = PROPORTIONAL_GAIN * abs(errorValue);

      if(errorValue >= 0)
      {
    	  direction = 0;
      }
      else
      {
    	  direction = 1;
      }
      // === END P CONTROL BLOCK ===


      /*
        // === LQR CONTROL BLOCK ===

        // Estimate angle (from gyro only for now)
        float angle_rad = estimate_tilt_angle(filteredSensorData.Gyro_Y);

        // Convert gyro to rad/s
        float gyro_y_rad_s = ((float)filteredSensorData.Gyro_Y / 131.0f) * (M_PI / 180.0f);

        // Call LQR
        uint16_t actuation = LQR_Controller(angle_rad, gyro_y_rad_s);

        // === END LQR CONTROL BLOCK ===
      */


      if(0 == direction)
      {
    	  M1_A = MAX_16_BIT_VALUE - actuation;
          M1_B = MAX_16_BIT_VALUE;
      	  M2_A = MAX_16_BIT_VALUE - actuation;
          M2_B = MAX_16_BIT_VALUE;
      }
      else
      {
    	  M1_A = MAX_16_BIT_VALUE;
          M1_B = MAX_16_BIT_VALUE - actuation;
      	  M2_A = MAX_16_BIT_VALUE;
          M2_B = MAX_16_BIT_VALUE - actuation;
      }

      // Set the timers/PWM connected to the motors
      //         M1_A: D9  = PA_8  = already connected to Channel 1, Timer 1
      //         M1_B: D10 = PA_11 = already connected to Channel 4, Timer 1
      //         M2_A: D5  = PB_6  = has to be jumpered to Channel 2, Timer 1 = PA9  = D1
      //         M2_B: D6  = PB_1  = has to be jumpered to Channel 3, Timer 1 = PA10 = D2

      // NOTE: On Nucleo-F303K, you will have to bend pins D5 nd D6, so that these don't connect to M2A and M2B. Then, you'll have to
      //       connect the output of Timer 1, channel 2 and 3 to D1 (PA9) and D2 (PA10) using jumper wires.
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, M1_A);
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, M1_B);
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, M2_A);
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, M2_B);

      HAL_Delay(1000);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00201D2B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 19999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Hello World!\r\n", strlen("Hello World!\r\n"), HAL_MAX_DELAY);
	  HAL_Delay(1000); // wait 1 second

  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
